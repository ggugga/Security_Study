라이브러리 함수 대신 SECCOMP를 적용하는 다른 방법
=> Berkeley Packet Filter(BPF)
BPF는 커널에서 지원하는 VM (작은 인터프리터)
네트워크 패킷을 분석하고 필터링하는 (특정한 작업)목적으로 사용

-> BPF 프로그램을 작성하여 커널에 로드

[BPF 명령어]
BPF_LD
: 인자로 전달된 값을 누산기에 복사합니다. 
이를 통해 값을 복사한 후 비교 구문에서 해당 값을 비교할 수 있습니다.

BPF_JMP
: 지정한 위치로 분기합니다.

BPF_JEQ
: 설정한 비교 구문이 일치할 경우 지정한 위치로 분기합니다.

BPF_RET
: 인자로 전달된 값을 반환합니다.

=> BPF Macro 
위의 코드를 직접 입력하지 않고 편리하게 원하는 코드를 실행할 수 있게끔 매크로를 제공

[BPF 프로그램 내에서 논리적 흐름을 제어하는 기본 구성 요소]

> BPF_STMT
구조: BPF_STMT(opcode, operand)

opcode : 수행할 작업의 종류를 나타내는 코드
ex) 값을 로드하거나 저장하는 명령어

operand : 해당 작업에 필요한 추가 정보나 값

예제 : BPF_STMT(BPF_LD | BPF_IMM, 42)
BPF_LD = "Load"
BPF_IMM = "Immediate" 
=> "상수 42를 로드하라"

> BPF_JUMP 
BPF_JUMP는 조건부 또는 무조건 분기 명령어를 표현합니다. 
특정 조건을 검사하고, 조건이 충족되면 프로그램의 다른 위치로 점프

구조: BPF_JUMP(opcode, operand, jt, jf)

opcode: 수행할 작업의 종류를 나타내는 코드. 주로 비교 작업
operand: 비교할 값
jt (jump true): 조건이 참일 때 점프할 명령어의 오프셋입니다.
jf (jump false): 조건이 거짓일 때 점프할 명령어의 오프셋입니다.

예제: BPF_JUMP(BPF_JEQ | BPF_K, 42, 1, 0)

BPF_JEQ = "Jump if Equal"
BPF_K = "Constant" 

"레지스터 값이 42와 같으면 1칸 앞으로 점프하고, 
그렇지 않으면 다음 명령어(0)를 실행하라"


